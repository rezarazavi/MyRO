				//////////////////////////face detection parameters, comment to disable
		string face_cascade_name = "haarcascade_frontalface_alt.xml";
		string eyes_cascade_name = "haarcascade_eye_tree_eyeglasses.xml";
		cv::CascadeClassifier face_cascade;
		cv::CascadeClassifier eyes_cascade;
		cv::RNG rng(12345);
		if( !face_cascade.load( face_cascade_name ) )
		{ 
			printf("--(!)Error loading\n"); 
		}
		if( !eyes_cascade.load( eyes_cascade_name ) )
		{
			 printf("--(!)Error loading\n");
	    }
		vector<cv::Rect> faces;
		cv::Mat frame_gray;
		///////////////////////////end of parametres			
/////////face recognition
					gettimeofday(&ctv,NULL);
					if ((ctv.tv_usec-tv.tv_usec>500000) || (ctv.tv_sec > tv.tv_sec))
					{
						resize(img1, img0, cv::Size(160,100), 0, 0, cv::INTER_NEAREST);
						cvtColor( img0, frame_gray, CV_BGR2GRAY );
						equalizeHist( frame_gray, frame_gray );
						  //-- Detect faces
						face_cascade.detectMultiScale( frame_gray, faces, 1.1, 2, 0|CV_HAAR_SCALE_IMAGE, cv::Size(30, 30) );
						printf("face detection: %d \n",faces.size());
						tv=ctv;
					}
					for( int i = 0; i < faces.size(); i++ )
					{
						cv::Point center( faces[i].x + faces[i].width*0.5, faces[i].y + faces[i].height*0.5 );
						cv::ellipse( img1, center*4, cv::Size( faces[i].width*0.5*4, faces[i].height*0.5*4), 0, 0, 360, cv::Scalar( 255, 0, 255 ), 4, 8, 0 );
					}
					/////////face recognition ends


